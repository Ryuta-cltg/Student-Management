<?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="student.management.Student.Management.repository.StudentRepository">

  <!--受講生の全件検索-->
    <select id="search" resultType="student.management.Student.Management.data.Student">
      SELECT
        id,
        full_name   AS fullname,
        furigana,
        nickname,
        email,
        region,
        age,
        gender,
        remark,
        is_deleted  AS isDeleted
      FROM students
    </select>

  <!--受講生の検索-->
  <select id="searchStudent" resultType="student.management.Student.Management.data.Student">
    SELECT
      id,
      full_name   AS fullname,
      furigana,
      nickname,
      email,
      region,
      age,
      gender,
      remark,
      is_deleted  AS isDeleted
    FROM students
    WHERE id = #{id}
  </select>

  <!--受講生のコース情報の全件検索-->
  <select id="searchStudentCourseList" resultType="student.management.Student.Management.data.StudentCourse">
    SELECT
      sc. id,
      sc.student_id           AS studentId,
      sc.course_id            AS courseId,
      c.course_name           AS courseName,
      sc.start_date           AS startDate,
      sc.end_date             AS endDate
    FROM students_courses sc
    LEFT JOIN courses c
      ON c.course_id = sc.course_id
  </select>

  <!--受講生IDに紐づく受講生コース情報を検索-->
  <select id="searchStudentCourse" resultType="student.management.Student.Management.data.StudentCourse">
    SELECT
      sc. id,
      sc.student_id           AS studentId,
      sc.course_id            AS courseId,
      c.course_name           AS courseName,
      sc.start_date           AS startDate,
      sc.end_date             AS endDate
    FROM students_courses sc
    LEFT JOIN courses c
     ON c.course_id = sc.course_id
    WHERE sc.student_id = #{studentId}
  </select>

  <!-- コース名の存在チェック -->
  <select id="existsCourseName" resultType="int">
    SELECT COUNT(*)
    FROM courses
    WHERE course_name = #{courseName}
  </select>

  <!--受講生を新規登録します。IDに関しては自動採番-->
  <insert id="registerStudent"
    parameterType="student.management.Student.Management.data.Student"
    useGeneratedKeys="true"
    keyProperty="id">
    INSERT INTO students(
    full_name, furigana, nickname, email, region, age, gender, remark, is_deleted
    )
    VALUES(#{fullname}, #{furigana}, #{nickname}, #{email}, #{region}, #{age}, #{gender}, #{remark}, false)
  </insert>

  <!--受講生コース情報を新規登録します。IDに関しては自動採番-->
  <insert id="registerStudentCourse"
    parameterType="student.management.Student.Management.data.StudentCourse"
    useGeneratedKeys="true"
    keyProperty="id">
    INSERT INTO students_courses(
    student_id,
    course_id,
    course_name,
    start_date,
    end_date
    )
    VALUES(#{studentId},
    (SELECT course_id FROM courses WHERE course_name = #{courseName}),
    #{courseName},
    #{startDate},
    #{endDate}
    )
  </insert>

  <!--受講生を更新-->
  <update id="updateStudent" parameterType="student.management.Student.Management.data.Student">
    UPDATE students
    SET
    full_name = #{fullname},
    furigana = #{furigana},
    nickname = #{nickname},
    email = #{email},
    region = #{region},
    age = #{age},
    gender = #{gender},
    remark = #{remark},
    is_deleted = #{isDeleted}
    WHERE id = #{id}
  </update>

  <!--受講生コース情報を新規登録します。IDに関しては自動採番-->
  <update id="updateStudentCourse"
          parameterType="student.management.Student.Management.data.StudentCourse">
    UPDATE students_courses
    SET
      course_id   = (SELECT course_id FROM courses WHERE course_name = #{courseName}),
      course_name = #{courseName}
    WHERE id = #{id}
  </update>
</mapper>
